name: 'Terraform Apply for AZURE' 
description: 'Download a Terraform plan workflow artifact created by `Pwd9000-ML/terraform-azurerm-plan` and apply with AzureRM backend'

inputs:
  plan_mode:
    description: '(Optional) Specify plan mode. Valid options are "deploy" or "destroy". Default=deploy.'
    required: false
    type: string
    default: "deploy"

  tf_version:
    description: '(Optional) Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
    required: false
    type: string
    default: latest

  tf_key:
    description: '(Required) Specifies the Terraform state file name for this plan.'
    required: true
    type: string

  az_resource_group:
    description: '(Required) Specifies the Azure Resource Group where the backend storage account is hosted.'
    required: true
    type: string

  az_storage_acc:
    description: '(Required) Specifies the Azure Storage Account where the backend state is hosted.'
    required: true
    type: string

  az_container_name:
    description: '(Required) Specifies the Azure Storage account container where backend Terraform state is hosted.'
    required: true
    type: string

  arm_client_id:
    description: 'Specifies the Azure ARM CLIENT ID.'
    required: true

  arm_client_secret:
    description: 'Specifies the Azure ARM CLIENT SECRET.'
    required: true

  arm_subscription_id:
    description: 'Specifies the Azure ARM SUBSCRIPTION ID.'
    required: true

  arm_tenant_id:
    description: 'Specifies the Azure ARM TENANT ID.'
    required: true

# https://actions-cool.github.io/github-action-branding/
branding:
  icon: 'align-left'
  color: 'blue'

runs:
  using: "composite"

  steps:
    - name: Set Environment VARS
      shell: bash
      id: vars
      run: |
          echo "ARM_CLIENT_ID=${{ inputs.arm_client_id }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ inputs.arm_client_secret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ inputs.arm_subscription_id }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ inputs.arm_tenant_id }}" >> $GITHUB_ENV

    - name: Download Artifact
      uses: actions/download-artifact@v3.0.2
      with:
        name: "${{ inputs.plan_mode }}-${{ inputs.tf_key }}"
        path: ${{ inputs.plan_mode }}/staging

    - name: Decompress TF Plan artifact
      shell: bash
      run: unzip ${{ inputs.plan_mode }}${{ inputs.tf_key }}.zip
      working-directory: ${{ inputs.plan_mode }}/staging

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.2
      with:
        terraform_version: ${{ inputs.tf_version }}

    - name: Terraform Init
      shell: bash
      id: init
      run: terraform init --backend-config="storage_account_name=${{ inputs.az_storage_acc }}" --backend-config="container_name=${{ inputs.az_container_name }}" --backend-config="resource_group_name=${{ inputs.az_resource_group }}" --backend-config="key=${{ inputs.tf_key }}"
      working-directory: ${{ inputs.plan_mode }}/staging

    - name: Terraform Apply Deploy
      if: ${{ inputs.plan_mode == 'deploy' }}
      shell: bash
      run: terraform apply deploy_plan.tfplan
      working-directory: ${{ inputs.plan_mode }}/staging

    - name: Terraform Apply Destroy
      if: ${{ inputs.plan_mode == 'destroy' }}
      shell: bash
      run: terraform apply destroy_plan.tfplan
      working-directory: ${{ inputs.plan_mode }}/staging
